on: [push, pull_request]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  GCE_ZONE: us-west1-a
  GCE_PROJECT_ID: elotl-kip

name: Build package
jobs:
  build:
    runs-on: ubuntu-18.04
    steps:

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'

    - name: Fetch tags
      run: git fetch origin +refs/tags/*:refs/tags/*

    - name: Set VERSION
      if: startsWith(github.event.ref, 'refs/tags/v')
      run: echo ::set-env name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Set GCE_VERSION
      run: echo ::set-env name=GCE_VERSION::${VERSION//./-}

    - name: Save GCE account.json
      run: echo "${{ secrets.GCP_ACCOUNT_JSON }}" | base64 -d > account.json

    - name: Set GCE_SA_KEY
      run: echo ::set-env name=GCE_SA_KEY::$(jq '.private_key' < account.json)

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${GCE_SA_KEY}
        project_id: ${GCE_PROJECT_ID}

    - name: Build package
      run: |
        sudo apt-get update -y && sudo apt-get install debhelper devscripts curl jq
        ./build.sh

    - name: Set package name
      id: get_package_name
      run: echo ::set-output name=pkgname::$(ls -1 kip-cell_*.deb)

    - name: Validate template
      uses: operatehappy/packer-github-actions@v0.2.0
      with:
        command: validate
        arguments: -syntax-only
        target: packer.json

    - name: Build image
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: operatehappy/packer-github-actions@v0.2.0
      with:
        command: build
        arguments: -var package=${{ steps.get_package_name.outputs.pkgname }}
        target: packer.json

    - name: Make GCE image public
      if: startsWith(github.event.ref, 'refs/tags/v')
      run: |-
        gcloud compute images add-iam-policy-binding \
          elotl-kipdev-${VERSION} \
          --member=allAuthenticatedUsers \
          --role='roles/compute.imageUser'

    - name: Create release
      if: startsWith(github.event.ref, 'refs/tags/v')
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload release asset
      if: startsWith(github.event.ref, 'refs/tags/v')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.get_package_name.outputs.pkgname }}
        asset_name: ${{ steps.get_package_name.outputs.pkgname }}
        asset_content_type: application/octet-stream
